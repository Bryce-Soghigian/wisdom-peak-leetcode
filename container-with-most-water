# [Problem Name](link_to_problem)


## Notes/Clarifying Understanding of the Question
We are given a list of non negative integers where each represents a coordinate (i, a) with n vertical lines are drawn

## Problem Constraints
n == height.length
2 <= n <= 105
0 <= height[i] <= 104
Non-Negative Numbers are not allowed.
## Problem Intuitions
We only have positive heights so maybe sliding window?


## Approaches


### Greedy with Two Pointers | TC O(N) | Space O(1)
- WE want to have a start and end pointer where we move those inward and greedily take the next larger while maintaining a maximumum 
1. Define all pointers and maximum | TC = O(1), SC = O(1) 
2. Iterate through the List while start <= end | TC = O(N), SC = O(1)
2a. We want to check to see if our current window is greater than maximum so far
2b. then we want to check to see which pointer is bigger. If our left pointer is smaller we move the left pointer. 
2c. else we move the right pointer
#### Note We want to greedily take the one that is smaller
### Brute Force | TC O(N)^2 | SC O(1)
- We want to make all the possible combinations of the heights and keep track of the maximum we see. I think this approach isnt very intuitive but at least it gives us a place to start.



### Testcases
```python
class TestSolution:
    """
    Test solution Using Zombie
	1. Zero Case
	2. One Case
	3. Many Case
	4. Boundary Conditions
	5. Interface Definiton
	6. Exceptions 

    """
    def test_main():
	solution_instance = Solution()
	assert "case 1" == solution_instance()
	assert "Not Valid input" == solution_instance("sfadfasfsafsdfa")
	assert 49 == solution_instance([1,8,6,2,5,4,8,3,7])
	assert 14  == solution_instance([8,0,7])
	assert 0 == solution_instance([3242334223])
class Solution:

	def __call__(self, nums):
		if not isInstance(nums, list):
			return "Not Valid Input"
		
		start = 0
		end = len(nums) - 1
		maximum = 0
		while start < end:
			# min value between start and end
			window_height = min(nums[start], nums[end])
			maximum = max(window_height * (end - start), maximum)
			if nums[start] < nums[end]:
				start += 1
			else:
				end += 1
		return maximum

```

#### Difficulty::Medium
#### Duration::19m 
#### Interview Question Type:: Greedy, Two Pointers
#### What did I do well?:: Identifying the greedy approach
#### What do I need to improve?:: Need to go through things faster when covering multiple approaches.
#### Intuitive Takeaways:: When testing the one case we can run into some tricky input


